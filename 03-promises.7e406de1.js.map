{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAGzBI,EAA8BP,EAA9BC,KAAMO,EAAwBR,EAAxBI,MAAOK,EAAiBT,EAAjBK,KAAMK,EAAWV,EAAXM,OA0B3B,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUR,MAAAS,IAGpBG,EAAO,CAAEJ,WAAUR,MAAAS,G,GAEpBA,E,IAnCPN,EAAKc,iBAAiB,UAEtB,SAA0BC,GAGxB,GAFAA,EAAMC,iBAEFf,EAAMgB,MAAQ,GAAKf,EAAKe,MAAQ,GAAKf,EAAKe,MAAQ,EAGpD,OAFA1B,EAAA2B,OAAOC,QAAS,sCAChBnB,EAAKoB,QAKP,IADA,IAAIC,EAAaC,OAAOrB,EAAMgB,OACrBM,EAAgB,EAAGA,GAAiBpB,EAAOc,MAAOM,IACzDnB,EAAcmB,EAAeF,GAC1BG,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUqB,EAAKD,EAAL5B,MACjBN,EAAA2B,OAAOS,QAAQ,sBAAqCC,OAAfvB,EAAS,QAAYuB,OAANF,EAAM,M,IAE3DG,OAAM,SAAAJ,G,IAAGK,EAAQL,EAARK,SAAUC,EAAKN,EAAL5B,MAClBN,EAAA2B,OAAOC,QAAQ,oBAAmCS,OAAfE,EAAS,QAAYF,OAANG,EAAM,M,IAE5DV,GAAcC,OAAOpB,EAAKe,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nconst { form, delay, step, amount } = refs;\n\nform.addEventListener('submit', promiseGenerator);\n\nfunction promiseGenerator(event) {\n  event.preventDefault();\n\n  if (delay.value < 1 || step.value < 1 || step.value < 1) {\n    Notify.failure(`Please input a positive value`);\n    form.reset();\n    return;\n  }\n\n  let delayValue = Number(delay.value);\n  for (let positionValue = 1; positionValue <= amount.value; positionValue++) {\n    createPromise(positionValue, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fullfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ posiiton, delay }) => {\n        Notify.failure(`Rejected promise ${posiiton} in ${delay}ms`);\n      });\n    delayValue += Number(step.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$form","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","value","Notify","failure","reset","delayValue","Number","positionValue","then","param","delay1","success","concat","catch","posiiton","delay2"],"version":3,"file":"03-promises.7e406de1.js.map"}